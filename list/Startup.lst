


ARM Macro Assembler    Page 1 


    1 00000000         ; <<< Use Configuration Wizard in Context Menu >>>
    2 00000000         ;*******************************************************
                       ***********************
    3 00000000         ;
    4 00000000         ; Startup.s - Startup code for Stellaris.
    5 00000000         ;
    6 00000000         ; Copyright (c) 2006-2008 Luminary Micro, Inc.  All righ
                       ts reserved.
    7 00000000         ; 
    8 00000000         ; Software License Agreement
    9 00000000         ; 
   10 00000000         ; Luminary Micro, Inc. (LMI) is supplying this software 
                       for use solely and
   11 00000000         ; exclusively on LMI's microcontroller products.
   12 00000000         ; 
   13 00000000         ; The software is owned by LMI and/or its suppliers, and
                        is protected under
   14 00000000         ; applicable copyright laws.  All rights are reserved.  
                       You may not combine
   15 00000000         ; this software with "viral" open-source software in ord
                       er to form a larger
   16 00000000         ; program.  Any use in violation of the foregoing restri
                       ctions may subject
   17 00000000         ; the user to criminal sanctions under applicable laws, 
                       as well as to civil
   18 00000000         ; liability for the breach of the terms and conditions o
                       f this license.
   19 00000000         ; 
   20 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   21 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   22 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   23 00000000         ; LMI SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPE
                       CIAL, INCIDENTAL, OR
   24 00000000         ; CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   25 00000000         ; 
   26 00000000         ; This is part of revision 2523 of the Stellaris Periphe
                       ral Driver Library.
   27 00000000         ;
   28 00000000         ;*******************************************************
                       ***********************
   29 00000000         
   30 00000000                 IMPORT           OSPendSV
   31 00000000                 IMPORT           clock_tick
   32 00000000         
   33 00000000         ;*******************************************************
                       ***********************
   34 00000000         ;
   35 00000000         ; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000000         ;
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000 00000100 
                       Stack   EQU              0x00000100
   39 00000000         
   40 00000000         ;*******************************************************
                       ***********************



ARM Macro Assembler    Page 2 


   41 00000000         ;
   42 00000000         ; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   43 00000000         ;
   44 00000000         ;*******************************************************
                       ***********************
   45 00000000 00000000 
                       Heap    EQU              0x00000000
   46 00000000         
   47 00000000         ;*******************************************************
                       ***********************
   48 00000000         ;
   49 00000000         ; Allocate space for the stack.
   50 00000000         ;
   51 00000000         ;*******************************************************
                       ***********************
   52 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   53 00000000         StackMem
   54 00000000                 SPACE            Stack
   55 00000100         __initial_sp
   56 00000100         
   57 00000100         ;*******************************************************
                       ***********************
   58 00000100         ;
   59 00000100         ; Allocate space for the heap.
   60 00000100         ;
   61 00000100         ;*******************************************************
                       ***********************
   62 00000100                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   63 00000000         __heap_base
   64 00000000         HeapMem
   65 00000000                 SPACE            Heap
   66 00000000         __heap_limit
   67 00000000         
   68 00000000         ;*******************************************************
                       ***********************
   69 00000000         ;
   70 00000000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   71 00000000         ;
   72 00000000         ;*******************************************************
                       ***********************
   73 00000000                 PRESERVE8
   74 00000000         
   75 00000000         ;*******************************************************
                       ***********************
   76 00000000         ;
   77 00000000         ; Place code into the reset code section.
   78 00000000         ;
   79 00000000         ;*******************************************************
                       ***********************
   80 00000000                 AREA             RESET, CODE, READONLY
   81 00000000                 THUMB
   82 00000000         
   83 00000000         ;*******************************************************
                       ***********************
   84 00000000         ;
   85 00000000         ; External declaration for the interrupt handler used by



ARM Macro Assembler    Page 3 


                        the application.
   86 00000000         ;
   87 00000000         ;*******************************************************
                       ***********************
   88 00000000                 EXTERN           UARTIntHandler
   89 00000000         
   90 00000000         ;*******************************************************
                       ***********************
   91 00000000         ;
   92 00000000         ; The vector table.
   93 00000000         ;
   94 00000000         ;*******************************************************
                       ***********************
   95 00000000                 EXPORT           __Vectors
   96 00000000         __Vectors
   97 00000000 00000100        DCD              StackMem + Stack ; Top of Stack
                                                            
   98 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   99 00000008 00000000        DCD              NmiSR       ; NMI Handler
  100 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r
  101 00000010 00000000        DCD              IntDefaultHandler 
                                                            ; MPU Fault Handler
                                                            
  102 00000014 00000000        DCD              IntDefaultHandler 
                                                            ; Bus Fault Handler
                                                            
  103 00000018 00000000        DCD              IntDefaultHandler ; Usage Fault
                                                             Handler
  104 0000001C 00000000        DCD              0           ; Reserved
  105 00000020 00000000        DCD              0           ; Reserved
  106 00000024 00000000        DCD              0           ; Reserved
  107 00000028 00000000        DCD              0           ; Reserved
  108 0000002C 00000000        DCD              IntDefaultHandler 
                                                            ; SVCall Handler
  109 00000030 00000000        DCD              IntDefaultHandler ; Debug Monit
                                                            or Handler
  110 00000034 00000000        DCD              0           ; Reserved
  111 00000038 00000000        DCD              OSPendSV    ; PendSV Handler
  112 0000003C 00000000        DCD              clock_tick  ; SysTick Handler
  113 00000040 00000000        DCD              IntDefaultHandler ; GPIO Port A
                                                            
  114 00000044 00000000        DCD              IntDefaultHandler ; GPIO Port B
                                                            
  115 00000048 00000000        DCD              IntDefaultHandler ; GPIO Port C
                                                            
  116 0000004C 00000000        DCD              IntDefaultHandler ; GPIO Port D
                                                            
  117 00000050 00000000        DCD              IntDefaultHandler ; GPIO Port E
                                                            
  118 00000054 00000000        DCD              UARTIntHandler ; UART0
  119 00000058 00000000        DCD              IntDefaultHandler ; UART1
  120 0000005C 00000000        DCD              IntDefaultHandler ; SSI
  121 00000060 00000000        DCD              IntDefaultHandler ; I2C
  122 00000064 00000000        DCD              IntDefaultHandler ; PWM Fault
  123 00000068 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 0
  124 0000006C 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 1



ARM Macro Assembler    Page 4 


  125 00000070 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 2
  126 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder
  127 00000078 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 0
  128 0000007C 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 1
  129 00000080 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 2
  130 00000084 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 3
  131 00000088 00000000        DCD              IntDefaultHandler ; Watchdog
  132 0000008C 00000000        DCD              IntDefaultHandler ; Timer 0A
  133 00000090 00000000        DCD              IntDefaultHandler ; Timer 0B
  134 00000094 00000000        DCD              IntDefaultHandler ; Timer 1A
  135 00000098 00000000        DCD              IntDefaultHandler ; Timer 1B
  136 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2A
  137 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2B
  138 000000A4 00000000        DCD              IntDefaultHandler ; Comp 0
  139 000000A8 00000000        DCD              IntDefaultHandler ; Comp 1
  140 000000AC 00000000        DCD              IntDefaultHandler ; Comp 2
  141 000000B0 00000000        DCD              IntDefaultHandler 
                                                            ; System Control
  142 000000B4 00000000        DCD              IntDefaultHandler 
                                                            ; Flash Control
  143 000000B8 00000000        DCD              IntDefaultHandler ; GPIO Port F
                                                            
  144 000000BC 00000000        DCD              IntDefaultHandler ; GPIO Port G
                                                            
  145 000000C0 00000000        DCD              IntDefaultHandler ; GPIO Port H
                                                            
  146 000000C4 00000000        DCD              IntDefaultHandler 
                                                            ; UART2 Rx and Tx
  147 000000C8 00000000        DCD              IntDefaultHandler 
                                                            ; SSI1 Rx and Tx
  148 000000CC 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer A
  149 000000D0 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer B
  150 000000D4 00000000        DCD              IntDefaultHandler ; I2C1 Master
                                                             and Slave
  151 000000D8 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 1
  152 000000DC 00000000        DCD              IntDefaultHandler ; CAN0
  153 000000E0 00000000        DCD              IntDefaultHandler ; CAN1
  154 000000E4 00000000        DCD              IntDefaultHandler ; CAN2
  155 000000E8 00000000        DCD              IntDefaultHandler ; Ethernet
  156 000000EC 00000000        DCD              IntDefaultHandler ; Hibernate
  157 000000F0 00000000        DCD              IntDefaultHandler ; USB0
  158 000000F4 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 3
  159 000000F8 00000000        DCD              IntDefaultHandler ; uDMA Softwa
                                                            re Transfer
  160 000000FC 00000000        DCD              IntDefaultHandler ; uDMA Error
  161 00000100         
  162 00000100         ;*******************************************************
                       ***********************
  163 00000100         ;



ARM Macro Assembler    Page 5 


  164 00000100         ; This is the code that gets called when the processor f
                       irst starts execution
  165 00000100         ; following a reset event.
  166 00000100         ;
  167 00000100         ;*******************************************************
                       ***********************
  168 00000100                 EXPORT           Reset_Handler
  169 00000100         Reset_Handler
  170 00000100         ;
  171 00000100         ; Call the C library enty point that handles startup.  T
                       his will copy
  172 00000100         ; the .data section initializers from flash to SRAM and 
                       zero fill the
  173 00000100         ; .bss section.
  174 00000100         ;
  175 00000100                 IMPORT           __main
  176 00000100 F7FF BFFE       B                __main
  177 00000104         
  178 00000104         ;*******************************************************
                       ***********************
  179 00000104         ;
  180 00000104         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  181 00000104         ; simply enters an infinite loop, preserving the system 
                       state for examination
  182 00000104         ; by a debugger.
  183 00000104         ;
  184 00000104         ;*******************************************************
                       ***********************
  185 00000104         NmiSR
  186 00000104 E7FE            B                NmiSR
  187 00000106         
  188 00000106         ;*******************************************************
                       ***********************
  189 00000106         ;
  190 00000106         ; This is the code that gets called when the processor r
                       eceives a fault
  191 00000106         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  192 00000106         ; for examination by a debugger.
  193 00000106         ;
  194 00000106         ;*******************************************************
                       ***********************
  195 00000106         FaultISR
  196 00000106 E7FE            B                FaultISR
  197 00000108         
  198 00000108         ;*******************************************************
                       ***********************
  199 00000108         ;
  200 00000108         ; This is the code that gets called when the processor r
                       eceives an unexpected
  201 00000108         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  202 00000108         ; for examination by a debugger.
  203 00000108         ;
  204 00000108         ;*******************************************************
                       ***********************
  205 00000108         IntDefaultHandler
  206 00000108 E7FE            B                IntDefaultHandler



ARM Macro Assembler    Page 6 


  207 0000010A         
  208 0000010A         ;*******************************************************
                       ***********************
  209 0000010A         ;
  210 0000010A         ; Make sure the end of this section is aligned.
  211 0000010A         ;
  212 0000010A         ;*******************************************************
                       ***********************
  213 0000010A 00 00           ALIGN
  214 0000010C         
  215 0000010C         ;*******************************************************
                       ***********************
  216 0000010C         ;
  217 0000010C         ; Some code in the normal code section for initializing 
                       the heap and stack.
  218 0000010C         ;
  219 0000010C         ;*******************************************************
                       ***********************
  220 0000010C                 AREA             |.text|, CODE, READONLY
  221 00000000         
  222 00000000         ;*******************************************************
                       ***********************
  223 00000000         ;
  224 00000000         ; The function expected of the C library startup code fo
                       r defining the stack
  225 00000000         ; and heap memory locations.  For the C library version 
                       of the startup code,
  226 00000000         ; provide this function so that the C library initializa
                       tion code can find out
  227 00000000         ; the location of the stack and heap.
  228 00000000         ;
  229 00000000         ;*******************************************************
                       ***********************
  230 00000000                 IF               :DEF: __MICROLIB
  231 00000000                 EXPORT           __initial_sp
  232 00000000                 EXPORT           __heap_base
  233 00000000                 EXPORT           __heap_limit
  234 00000000                 ELSE
  243                          ENDIF
  244 00000000         
  245 00000000         ;*******************************************************
                       ***********************
  246 00000000         ;
  247 00000000         ; Make sure the end of this section is aligned.
  248 00000000         ;
  249 00000000         ;*******************************************************
                       ***********************
  250 00000000                 ALIGN
  251 00000000         
  252 00000000         ;*******************************************************
                       ***********************
  253 00000000         ;
  254 00000000         ; Tell the assembler that we're done.
  255 00000000         ;
  256 00000000         ;*******************************************************
                       ***********************
  257 00000000                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork -o.\obj\Startup.o
 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Luminary --predefine="__EVAL SETA 1" --pre



ARM Macro Assembler    Page 7 


define="__MICROLIB SETA 1" --list=.\list\Startup.lst Startup.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 52 in file Startup.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 53 in file Startup.s
   Uses
      At line 97 in file Startup.s
Comment: StackMem used once
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 55 in file Startup.s
   Uses
      At line 231 in file Startup.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 62 in file Startup.s
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 64 in file Startup.s
   Uses
      None
Comment: HeapMem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 63 in file Startup.s
   Uses
      At line 232 in file Startup.s
Comment: __heap_base used once
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 66 in file Startup.s
   Uses
      At line 233 in file Startup.s
Comment: __heap_limit used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 00000106

Symbol: FaultISR
   Definitions
      At line 195 in file Startup.s
   Uses
      At line 100 in file Startup.s
      At line 196 in file Startup.s

IntDefaultHandler 00000108

Symbol: IntDefaultHandler
   Definitions
      At line 205 in file Startup.s
   Uses
      At line 101 in file Startup.s
      At line 102 in file Startup.s
      At line 103 in file Startup.s
      At line 108 in file Startup.s
      At line 109 in file Startup.s
      At line 113 in file Startup.s
      At line 114 in file Startup.s
      At line 115 in file Startup.s
      At line 116 in file Startup.s
      At line 117 in file Startup.s
      At line 119 in file Startup.s
      At line 120 in file Startup.s
      At line 121 in file Startup.s
      At line 122 in file Startup.s
      At line 123 in file Startup.s
      At line 124 in file Startup.s
      At line 125 in file Startup.s
      At line 126 in file Startup.s
      At line 127 in file Startup.s
      At line 128 in file Startup.s
      At line 129 in file Startup.s
      At line 130 in file Startup.s
      At line 131 in file Startup.s
      At line 132 in file Startup.s
      At line 133 in file Startup.s
      At line 134 in file Startup.s
      At line 135 in file Startup.s
      At line 136 in file Startup.s
      At line 137 in file Startup.s
      At line 138 in file Startup.s
      At line 139 in file Startup.s
      At line 140 in file Startup.s
      At line 141 in file Startup.s
      At line 142 in file Startup.s
      At line 143 in file Startup.s
      At line 144 in file Startup.s
      At line 145 in file Startup.s
      At line 146 in file Startup.s
      At line 147 in file Startup.s
      At line 148 in file Startup.s
      At line 149 in file Startup.s
      At line 150 in file Startup.s
      At line 151 in file Startup.s
      At line 152 in file Startup.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 153 in file Startup.s
      At line 154 in file Startup.s
      At line 155 in file Startup.s
      At line 156 in file Startup.s
      At line 157 in file Startup.s
      At line 158 in file Startup.s
      At line 159 in file Startup.s
      At line 160 in file Startup.s
      At line 206 in file Startup.s

NmiSR 00000104

Symbol: NmiSR
   Definitions
      At line 185 in file Startup.s
   Uses
      At line 99 in file Startup.s
      At line 186 in file Startup.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 80 in file Startup.s
   Uses
      None
Comment: RESET unused
Reset_Handler 00000100

Symbol: Reset_Handler
   Definitions
      At line 169 in file Startup.s
   Uses
      At line 98 in file Startup.s
      At line 168 in file Startup.s

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 96 in file Startup.s
   Uses
      At line 95 in file Startup.s
Comment: __Vectors used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 220 in file Startup.s
   Uses
      None
Comment: .text unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap 00000000

Symbol: Heap
   Definitions
      At line 45 in file Startup.s
   Uses
      At line 65 in file Startup.s
Comment: Heap used once
Stack 00000100

Symbol: Stack
   Definitions
      At line 38 in file Startup.s
   Uses
      At line 54 in file Startup.s
      At line 97 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSPendSV 00000000

Symbol: OSPendSV
   Definitions
      At line 30 in file Startup.s
   Uses
      At line 111 in file Startup.s
Comment: OSPendSV used once
UARTIntHandler 00000000

Symbol: UARTIntHandler
   Definitions
      At line 88 in file Startup.s
   Uses
      At line 118 in file Startup.s
Comment: UARTIntHandler used once
__main 00000000

Symbol: __main
   Definitions
      At line 175 in file Startup.s
   Uses
      At line 176 in file Startup.s
Comment: __main used once
clock_tick 00000000

Symbol: clock_tick
   Definitions
      At line 31 in file Startup.s
   Uses
      At line 112 in file Startup.s
Comment: clock_tick used once
4 symbols
341 symbols in table
